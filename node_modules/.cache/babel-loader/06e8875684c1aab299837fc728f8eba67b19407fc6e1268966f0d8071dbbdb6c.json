{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\premk\\\\Downloads\\\\Chat\\\\frontend\\\\src\\\\pages\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport SimplePeer from \"simple-peer\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStream, setRemoteStream] = useState(null);\n  const [userId, setUserId] = useState(null); // Unique user ID\n  const [targetUserId, setTargetUserId] = useState(\"\"); // Target user ID\n  const [isConnected, setIsConnected] = useState(false); // Connection status\n  const [error, setError] = useState(\"\"); // Error message\n\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const socket = useRef(null);\n  const peerConnection = useRef(null);\n  const location = useLocation();\n  const {\n    matchUserId\n  } = location.state || {};\n  useEffect(() => {\n    // Generate a unique user ID\n    const uniqueId = uuidv4();\n    setUserId(uniqueId);\n\n    // Initialize WebSocket connection\n    socket.current = io(\"http://localhost:5000\", {\n      transports: [\"websocket\"]\n    });\n\n    // Register user with the server\n    socket.current.emit(\"register-user\", {\n      userId: uniqueId\n    });\n\n    // Handle socket disconnection\n    socket.current.on(\"disconnect\", () => {\n      console.warn(\"Socket disconnected. Attempting to reconnect...\");\n      setIsConnected(false);\n    });\n\n    // Handle user not found\n    socket.current.on(\"user-not-found\", ({\n      userId\n    }) => {\n      setError(`User ${userId} not found.`);\n    });\n\n    // Handle random user found\n    socket.current.on(\"random-user-found\", ({\n      userId\n    }) => {\n      setTargetUserId(userId);\n      socket.current.emit(\"join-chat\", {\n        userId,\n        senderId: uniqueId\n      });\n    });\n\n    // Handle no active users\n    socket.current.on(\"no-active-users\", () => {\n      setError(\"No active users found.\");\n    });\n\n    // Get local media stream (video and audio)\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setLocalStream(stream);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n\n      // Auto-connect to a matched user\n      if (matchUserId) {\n        setTargetUserId(matchUserId);\n        socket.current.emit(\"join-chat\", {\n          userId: matchUserId,\n          senderId: uniqueId\n        });\n      }\n    }).catch(err => {\n      console.error(\"Error accessing media devices:\", err);\n    });\n\n    // Handle WebRTC offer\n    socket.current.on(\"offer\", async ({\n      offer,\n      senderId\n    }) => {\n      try {\n        if (!peerConnection.current) {\n          createPeerConnection(senderId);\n        }\n        await peerConnection.current.signal(offer);\n      } catch (err) {\n        console.error(\"Error handling offer:\", err);\n      }\n    });\n\n    // Handle WebRTC answer\n    socket.current.on(\"answer\", async ({\n      answer\n    }) => {\n      try {\n        if (peerConnection.current) {\n          await peerConnection.current.signal(answer);\n        }\n      } catch (err) {\n        console.error(\"Error handling answer:\", err);\n      }\n    });\n\n    // Handle ICE candidates\n    socket.current.on(\"ice-candidate\", async ({\n      candidate\n    }) => {\n      try {\n        if (peerConnection.current) {\n          await peerConnection.current.signal(candidate);\n        }\n      } catch (err) {\n        console.error(\"Error adding ICE candidate:\", err);\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      if (localStream) {\n        localStream.getTracks().forEach(track => track.stop());\n      }\n      if (peerConnection.current) {\n        peerConnection.current.destroy();\n        peerConnection.current = null;\n      }\n      if (socket.current) {\n        socket.current.disconnect();\n      }\n    };\n  }, [matchUserId]);\n\n  // Function to create WebRTC connection\n  const createPeerConnection = senderId => {\n    if (peerConnection.current) return; // Prevent duplicate connections\n\n    peerConnection.current = new SimplePeer({\n      initiator: false,\n      trickle: false,\n      stream: localStream\n    });\n    peerConnection.current.on(\"stream\", stream => {\n      setRemoteStream(stream);\n      if (remoteVideoRef.current) {\n        remoteVideoRef.current.srcObject = stream;\n      }\n    });\n    peerConnection.current.on(\"signal\", data => {\n      socket.current.emit(\"answer\", {\n        answer: data,\n        targetUserId: senderId,\n        senderId: userId\n      });\n    });\n    peerConnection.current.on(\"error\", err => {\n      console.error(\"Peer Connection Error:\", err);\n    });\n    peerConnection.current.on(\"close\", () => {\n      console.warn(\"Peer connection closed. Resetting...\");\n      peerConnection.current = null;\n      setIsConnected(false);\n    });\n    setIsConnected(true);\n  };\n\n  // Function to manually connect to a user\n  const handleConnectToUser = () => {\n    if (!targetUserId || !userId) {\n      setError(\"Target User ID or User ID is missing.\");\n      return;\n    }\n    setError(\"\"); // Clear previous errors\n    socket.current.emit(\"join-chat\", {\n      userId: targetUserId,\n      senderId: userId\n    });\n  };\n\n  // Function to auto-connect with a random user\n  const handleAutoConnect = () => {\n    if (!userId) {\n      setError(\"User ID is missing.\");\n      return;\n    }\n    setError(\"\"); // Clear previous errors\n    socket.current.emit(\"find-random-user\", {\n      senderId: userId\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connect-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Target User ID\",\n        value: targetUserId,\n        onChange: e => setTargetUserId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConnectToUser,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAutoConnect,\n        children: \"Auto Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: localVideoRef,\n        autoPlay: true,\n        muted: true,\n        className: \"local-video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: remoteVideoRef,\n        autoPlay: true,\n        className: \"remote-video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"Csx+3JFnAGhLZL/rA64/ASycK6A=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLocation","io","SimplePeer","v4","uuidv4","jsxDEV","_jsxDEV","Chat","_s","localStream","setLocalStream","remoteStream","setRemoteStream","userId","setUserId","targetUserId","setTargetUserId","isConnected","setIsConnected","error","setError","localVideoRef","remoteVideoRef","socket","peerConnection","location","matchUserId","state","uniqueId","current","transports","emit","on","console","warn","senderId","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","catch","err","offer","createPeerConnection","signal","answer","candidate","getTracks","forEach","track","stop","destroy","disconnect","initiator","trickle","data","handleConnectToUser","handleAutoConnect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["C:/Users/premk/Downloads/Chat/frontend/src/pages/Chat.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport SimplePeer from \"simple-peer\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./Chat.css\";\r\n\r\nconst Chat = () => {\r\n  const [localStream, setLocalStream] = useState(null);\r\n  const [remoteStream, setRemoteStream] = useState(null);\r\n  const [userId, setUserId] = useState(null); // Unique user ID\r\n  const [targetUserId, setTargetUserId] = useState(\"\"); // Target user ID\r\n  const [isConnected, setIsConnected] = useState(false); // Connection status\r\n  const [error, setError] = useState(\"\"); // Error message\r\n\r\n  const localVideoRef = useRef(null);\r\n  const remoteVideoRef = useRef(null);\r\n  const socket = useRef(null);\r\n  const peerConnection = useRef(null);\r\n  const location = useLocation();\r\n  const { matchUserId } = location.state || {};\r\n\r\n  useEffect(() => {\r\n    // Generate a unique user ID\r\n    const uniqueId = uuidv4();\r\n    setUserId(uniqueId);\r\n\r\n    // Initialize WebSocket connection\r\n    socket.current = io(\"http://localhost:5000\", { transports: [\"websocket\"] });\r\n\r\n    // Register user with the server\r\n    socket.current.emit(\"register-user\", { userId: uniqueId });\r\n\r\n    // Handle socket disconnection\r\n    socket.current.on(\"disconnect\", () => {\r\n      console.warn(\"Socket disconnected. Attempting to reconnect...\");\r\n      setIsConnected(false);\r\n    });\r\n\r\n    // Handle user not found\r\n    socket.current.on(\"user-not-found\", ({ userId }) => {\r\n      setError(`User ${userId} not found.`);\r\n    });\r\n\r\n    // Handle random user found\r\n    socket.current.on(\"random-user-found\", ({ userId }) => {\r\n      setTargetUserId(userId);\r\n      socket.current.emit(\"join-chat\", { userId, senderId: uniqueId });\r\n    });\r\n\r\n    // Handle no active users\r\n    socket.current.on(\"no-active-users\", () => {\r\n      setError(\"No active users found.\");\r\n    });\r\n\r\n    // Get local media stream (video and audio)\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        setLocalStream(stream);\r\n        if (localVideoRef.current) {\r\n          localVideoRef.current.srcObject = stream;\r\n        }\r\n\r\n        // Auto-connect to a matched user\r\n        if (matchUserId) {\r\n          setTargetUserId(matchUserId);\r\n          socket.current.emit(\"join-chat\", { userId: matchUserId, senderId: uniqueId });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error accessing media devices:\", err);\r\n      });\r\n\r\n    // Handle WebRTC offer\r\n    socket.current.on(\"offer\", async ({ offer, senderId }) => {\r\n      try {\r\n        if (!peerConnection.current) {\r\n          createPeerConnection(senderId);\r\n        }\r\n        await peerConnection.current.signal(offer);\r\n      } catch (err) {\r\n        console.error(\"Error handling offer:\", err);\r\n      }\r\n    });\r\n\r\n    // Handle WebRTC answer\r\n    socket.current.on(\"answer\", async ({ answer }) => {\r\n      try {\r\n        if (peerConnection.current) {\r\n          await peerConnection.current.signal(answer);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error handling answer:\", err);\r\n      }\r\n    });\r\n\r\n    // Handle ICE candidates\r\n    socket.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n      try {\r\n        if (peerConnection.current) {\r\n          await peerConnection.current.signal(candidate);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error adding ICE candidate:\", err);\r\n      }\r\n    });\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      if (localStream) {\r\n        localStream.getTracks().forEach((track) => track.stop());\r\n      }\r\n      if (peerConnection.current) {\r\n        peerConnection.current.destroy();\r\n        peerConnection.current = null;\r\n      }\r\n      if (socket.current) {\r\n        socket.current.disconnect();\r\n      }\r\n    };\r\n  }, [matchUserId]);\r\n\r\n  // Function to create WebRTC connection\r\n  const createPeerConnection = (senderId) => {\r\n    if (peerConnection.current) return; // Prevent duplicate connections\r\n\r\n    peerConnection.current = new SimplePeer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream: localStream,\r\n    });\r\n\r\n    peerConnection.current.on(\"stream\", (stream) => {\r\n      setRemoteStream(stream);\r\n      if (remoteVideoRef.current) {\r\n        remoteVideoRef.current.srcObject = stream;\r\n      }\r\n    });\r\n\r\n    peerConnection.current.on(\"signal\", (data) => {\r\n      socket.current.emit(\"answer\", { answer: data, targetUserId: senderId, senderId: userId });\r\n    });\r\n\r\n    peerConnection.current.on(\"error\", (err) => {\r\n      console.error(\"Peer Connection Error:\", err);\r\n    });\r\n\r\n    peerConnection.current.on(\"close\", () => {\r\n      console.warn(\"Peer connection closed. Resetting...\");\r\n      peerConnection.current = null;\r\n      setIsConnected(false);\r\n    });\r\n\r\n    setIsConnected(true);\r\n  };\r\n\r\n  // Function to manually connect to a user\r\n  const handleConnectToUser = () => {\r\n    if (!targetUserId || !userId) {\r\n      setError(\"Target User ID or User ID is missing.\");\r\n      return;\r\n    }\r\n    setError(\"\"); // Clear previous errors\r\n    socket.current.emit(\"join-chat\", { userId: targetUserId, senderId: userId });\r\n  };\r\n\r\n  // Function to auto-connect with a random user\r\n  const handleAutoConnect = () => {\r\n    if (!userId) {\r\n      setError(\"User ID is missing.\");\r\n      return;\r\n    }\r\n    setError(\"\"); // Clear previous errors\r\n    socket.current.emit(\"find-random-user\", { senderId: userId });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h1>Video Chat</h1>\r\n      <p>Your User ID: {userId}</p>\r\n      <div className=\"connect-section\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Target User ID\"\r\n          value={targetUserId}\r\n          onChange={(e) => setTargetUserId(e.target.value)}\r\n        />\r\n        <button onClick={handleConnectToUser}>Connect</button>\r\n        <button onClick={handleAutoConnect}>Auto Connect</button>\r\n      </div>\r\n      {error && <p className=\"error\">{error}</p>}\r\n      <div className=\"video-container\">\r\n        <video ref={localVideoRef} autoPlay muted className=\"local-video\" />\r\n        <video ref={remoteVideoRef} autoPlay className=\"remote-video\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}